{{/* Generate monitor grafana envs */}}
{{- define "grafana.envs" }}
env:
- name: NAMESPACE
  valueFrom:
    fieldRef:
      fieldPath: metadata.namespace
{{- if eq .Values.global.prometheusLocation "off-cluster" }}
- name: "PROMETHEUS_URL"
  valueFrom:
    secretKeyRef:
      name: prometheus-creds
      key: url
{{- else }}
- name: "PROMETHEUS_URL"
  value: http://$(DRYCC_PROMETHEUS_SERVICE_HOST):$(DRYCC_PROMETHEUS_SERVICE_PORT)
{{- end }}
- name: "BIND_PORT"
  value: "3000"
{{- if not (.Values.grafana.environment.DEFAULT_USER) }}
- name: "DEFAULT_USER"
  value: {{ randAlphaNum 32 }}
{{- end}}
{{- if not (.Values.grafana.environment.DEFAULT_USER_PASSWORD) }}
- name: "DEFAULT_USER_PASSWORD"
  value: {{ randAlphaNum 32 }}
{{- end}}
- name: "KUBERNETES_CLUSTER_DOMAIN"
  value: {{.Values.global.clusterDomain}}
{{- range $key, $value := .Values.grafana.environment }}
- name: {{ $key }}
  value: {{ $value | quote }}
{{- end }}
- name: "DRYCC_GRAFANA_URL"
{{- if .Values.global.certManagerEnabled }}
  value: https://drycc-monitor-grafana.{{ .Values.global.platformDomain }}
{{- else }}
  value: http://drycc-monitor-grafana.{{ .Values.global.platformDomain }}
{{- end }}
{{- if eq .Values.global.passportLocation "on-cluster"}}
- name: "DRYCC_PASSPORT_URL"
{{- if .Values.global.certManagerEnabled }}
  value: https://drycc-passport.{{ .Values.global.platformDomain }}
{{- else }}
  value: http://drycc-passport.{{ .Values.global.platformDomain }}
{{- end }}
- name: DRYCC_PASSPORT_KEY
  valueFrom:
    secretKeyRef:
      name: passport-creds
      key: drycc-passport-grafana-key
- name: DRYCC_PASSPORT_SECRET
  valueFrom:
    secretKeyRef:
      name: passport-creds
      key: drycc-passport-grafana-secret
{{- else }}
- name: DRYCC_PASSPORT_URL
  value: "{{ .Values.grafana.passportUrl }}"
- name: DRYCC_PASSPORT_KEY
  value: "{{ .Values.grafana.passportKey }}"
- name: DRYCC_PASSPORT_SECRET
  value: "{{ .Values.grafana.passportSecret }}"
{{- end }}
- name: "PROMETHEUS_LOCATION"
  value: {{ .Values.global.prometheusLocation }}
- name: "REDIS_LOCATION"
  value: {{ .Values.global.redisLocation }}
- name: "RABBITMQ_LOCATION"
  value: {{ .Values.global.rabbitmqLocation }}
- name: "STORAGE_LOCATION"
  value: {{ .Values.global.storageLocation }}
- name: "DATABASE_LOCATION"
  value: {{ .Values.global.databaseLocation }}
- name: "PASSPORT_LOCATION"
  value: {{ .Values.global.passportLocation }}
- name: "REGISTRY_LOCATION"
  value: {{ .Values.global.registryLocation }}
{{- end }}

{{/* Generate monitor telegraf envs */}}
{{- define "telegraf.envs" }}
env:
- name: POD_NAMESPACE
  valueFrom:
    fieldRef:
      fieldPath: metadata.namespace
- name: "AGENT_QUIET"
  value: "true"
- name: "AGENT_BUFFER_LIMIT"
  value: "100000"
- name: "ENABLE_KUBERNETES"
  value: "true"
{{- if (.Values.telegraf.postgresqlConnection) }}
- name: POSTGRESQL_CONNECTION
  value: {{ .Values.telegraf.postgresqlConnection }}
{{- else if eq .Values.global.databaseLocation "on-cluster"  }}
- name: PG_USER
  valueFrom:
    secretKeyRef:
      name: database-creds
      key: user
- name: PG_PASSWORD
  valueFrom:
    secretKeyRef:
      name: database-creds
      key: password
- name: POSTGRESQL_CONNECTION
  value: "postgres://$(PG_USER):$(PG_PASSWORD)@drycc-database.{{.Release.Namespace}}.svc.{{.Values.global.clusterDomain}}:5432/monitor"
{{- end }}
{{- end }}
